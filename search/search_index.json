{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Qandle AI","text":"<p>Welcome to Qandle AI - The provider of financial intelligence for LLM.</p>"},{"location":"#financial-intelligence","title":"Financial Intelligence","text":"<p>Qandle AI is the first financial market data provider dedicated entirely to LLM. It delivers data optimized for reasoning and token usage.</p> <p> Skip the complexity! Get pre-computed, AI-ready technical indicators in a single API call. No scattered data sources, no complex calculations\u2014just clean financial intelligence formatted specifically for AI applications and LLMs.</p> <p> /GET NVDA</p> <pre><code>PRICE: NVDA 143.85 -1.63 (-1.12%) | Range: 142.65-146.20 |Range_position: 33.80% | Gap: down -0.03\nMOVING_AVERAGES: 20MA:139.64+3.01% 50MA:125.49 (+14.63%) 200MA:128.06(+12.33%) Order: 20&gt;200&gt;50 Slopes: 20: +25.66\u00b0 50: +36.96\u00b0 200:+4.99\u00b0\nVOLUME: Current:242.40M | vs_20d_avg:117x | vs_yesterday:1.50x 5d_trend:down\nPRICE_LEVELS: Test_count R:144.37:4x S:143.74:2x | Distance_to R: -0.52(-0.36%) S:0.11(+0.07%) | Last_touch R:8d S:15d\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li> <p> Quick Start Guide</p> <p>From account setup to first API call in minutes - designed for builders!</p> <p> Get Started</p> </li> <li> <p> Introduction</p> <p>Why Qandle exists and how AI-optimized indicators solve real developer pain</p> <p> Learn More</p> </li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li> <p> /GET Symbol</p> <p>Complete endpoint documentation - everything you need to integrate</p> <p> View API</p> </li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<ul> <li> <p> LangChain Integration</p> <p>Build intelligent financial agents with pre-computed data instead of real-time calculations</p> <p> Tutorial</p> </li> <li> <p> Example Prompts</p> <p>Copy-paste prompts for portfolio analysis and investment decision-making</p> <p> View Prompts</p> </li> </ul>"},{"location":"#integration","title":"Integration","text":"<ul> <li> <p> Python SDK</p> <p>Simple pip install, environment variables, and you're ready to rock</p> <p> Python Guide</p> </li> <li> <p> Node.js SDK</p> <p>Full TypeScript support with async/await - npm install and go</p> <p> Node.js Guide</p> </li> <li> <p> MCP Server</p> <p>Zero-code integration with Claude Desktop, Cursor IDE, and other AI tools</p> <p> MCP Setup</p> </li> </ul>"},{"location":"api/get-symbol/","title":"/GET Symbol","text":"<p>Retrieve comprehensive financial intelligence for any stock symbol in a single API call. Get pre-computed technical indicators, price data, volume analysis, and support/resistance levels optimized for AI applications.</p>"},{"location":"api/get-symbol/#endpoint","title":"Endpoint","text":"<pre><code>GET https://api.qandle.ai/asset?symbol={symbol}\n</code></pre>"},{"location":"api/get-symbol/#authentication","title":"Authentication","text":"<p>Include your API key in the request header:</p> <pre><code>x-api-key: YOUR_API_KEY\n</code></pre> <p>Get your API key</p> <p>Visit qandle.ai to create an account and generate your API key.</p>"},{"location":"api/get-symbol/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>symbol</code> string \u2705 Required Stock symbol (e.g., \"AAPL\", \"NVDA\", \"TSLA\")"},{"location":"api/get-symbol/#response-format","title":"Response Format","text":"<p>The API returns a JSON object with a <code>message</code> field containing the formatted financial intelligence:</p> <pre><code>{\n  \"message\": \"PRICE: NVDA 143.85 -1.63 (-1.12%) | Range: 142.65-146.20 |Range_position: 33.80% | Gap: down -0.03\\nMOVING_AVERAGES: 20MA:139.64+3.01% 50MA:125.49 (+14.63%) 200MA:128.06(+12.33%) Order: 20&gt;200&gt;50 Slopes: 20: +25.66\u00b0 50: +36.96\u00b0 200:+4.99\u00b0\\nVOLUME: Current:242.40M | vs_20d_avg:117x | vs_yesterday:1.50x 5d_trend:down\\nPRICE_LEVELS: Test_count R:144.37:4x S:143.74:2x | Distance_to R: -0.52(-0.36%) S:0.11(+0.07%) | Last_touch R:8d S:15d\"\n}\n</code></pre>"},{"location":"api/get-symbol/#data-sections","title":"Data Sections","text":"<p>The response message contains structured financial intelligence in these sections:</p> <p>PRICE: Current price, change, percentage change, daily range, range position, and gap analysis</p> <p>MOVING_AVERAGES: 20, 50, and 200-day moving averages with relative positions, order, and slope angles</p> <p>VOLUME: Current volume vs historical averages and trends</p> <p>PRICE_LEVELS: Support and resistance levels with test counts, distances, and last touch dates</p>"},{"location":"api/get-symbol/#example-request","title":"Example Request","text":"cURLPythonNode.js <pre><code>curl -X GET \"https://api.qandle.ai/asset?symbol=AAPL\" \\\n     -H \"x-api-key: YOUR_API_KEY\"\n</code></pre> <pre><code>from qandle_ai import QandleClient\n\nclient = QandleClient()\nsummary = client.get(\"AAPL\")\nprint(summary)\n</code></pre> <pre><code>import { QandleClient } from 'qandle-ai';\n\nconst client = new QandleClient();\nconst summary = await client.get('AAPL');\nconsole.log(summary);\n</code></pre>"},{"location":"api/get-symbol/#error-responses","title":"Error Responses","text":"<p>The API returns appropriate HTTP status codes and error messages:</p> <ul> <li><code>400</code> - Bad Request (invalid symbol format)</li> <li><code>401</code> - Unauthorized (invalid or missing API key)</li> <li><code>404</code> - Not Found (symbol not found)</li> <li><code>429</code> - Too Many Requests (rate limit exceeded)</li> <li><code>500</code> - Internal Server Error</li> </ul>"},{"location":"api/get-symbol/#sdk-integration","title":"SDK Integration","text":"<p>For easier integration, use our official SDKs:</p> <ul> <li>Python SDK - <code>pip install qandle-ai</code></li> <li>Node.js SDK - <code>npm install qandle-ai</code></li> <li>MCP Server - Zero-code integration with AI assistants</li> </ul>"},{"location":"getting-started/introduction/","title":"Qandle: AI-Optimized Technical Indicators API","text":"<p> Qandle delivers pre-computed, AI-ready technical indicators in a single API call.</p> <p>Building AI applications for financial markets is challenging: technical indicators require complex math, data is scattered across expensive APIs, and raw market data isn't optimized for AI reasoning.</p> <p>Qandle AI provides deterministic, pre-calculated technical indicators delivered in one API call, formatted for maximum token efficiency and AI comprehension.</p> <p>No complex calculations, no scattered data sources\u2014just clean financial intelligence formatted specifically for AI applications and LLMs.</p> <p> /GET NVDA</p> <pre><code>PRICE: NVDA 143.85 -1.63 (-1.12%) | Range: 142.65-146.20 |Range_position: 33.80% | Gap: down -0.03\nMOVING_AVERAGES: 20MA:139.64+3.01% 50MA:125.49 (+14.63%) 200MA:128.06(+12.33%) Order: 20&gt;200&gt;50 Slopes: 20: +25.66\u00b0 50: +36.96\u00b0 200:+4.99\u00b0\nVOLUME: Current:242.40M | vs_20d_avg:117x | vs_yesterday:1.50x 5d_trend:down\nPRICE_LEVELS: Test_count R:144.37:4x S:143.74:2x | Distance_to R: -0.52(-0.36%) S:0.11(+0.07%) | Last_touch R:8d S:15d\n</code></pre>"},{"location":"getting-started/introduction/#why-choose-qandle","title":"Why Choose Qandle?","text":"<p> Single API Call: Get all relevant technical indicators for any stock through one endpoint\u2014no more juggling multiple data sources.</p> <p> AI-Optimized: Data structured specifically for LLM consumption, reducing token costs while improving analysis accuracy.</p> <p> Reliable &amp; Precise: Mathematically accurate indicators you can trust as the foundation for AI decision-making.</p>"},{"location":"getting-started/introduction/#built-for","title":"Built For","text":"<p>Developers creating AI trading bots, investment tools, financial assistants, and market research applications. \u2192 Node.js SDK | Python SDK</p> <p>AI App Users working with Claude Desktop, Cursor IDE, and other applications that support Model Context Protocol (MCP). \u2192 MCP Server Setup</p> <p> Ready to Start?</p> <p>Get up and running in minutes \u2192</p>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Learn how to use Qandle AI and effortlessly integrate financial intelligence into your AI application.</p>"},{"location":"getting-started/quickstart/#getting-started-guide","title":"Getting Started Guide","text":"<p>Qandle AI is designed for builders! Follow these steps to get up and running:</p>"},{"location":"getting-started/quickstart/#create-account-generate-api-key","title":"Create Account &amp; Generate API Key","text":"<p>Step 1: Account Setup</p> <p>Get your API credentials to start using Qandle AI</p> <p>Tasks to complete:</p> <p> Visit qandle.ai to create your account</p> <p> Sign in using Google, or your email</p> <p> Copy your new API key using the copy button</p> <p>Important</p> <p>Keep your API key secure and never share it publicly. Store it safely as you'll need it for authentication.</p>"},{"location":"getting-started/quickstart/#choose-your-integration-method","title":"Choose Your Integration Method","text":"<p>Step 2: Installation</p> <p>Choose your preferred integration method based on your use case</p> PythonNode.jsMCP Server <p>For Python developers building AI applications</p> <pre><code>pip install qandle-ai\n</code></pre> <p>For JavaScript/Node.js developers</p> <pre><code>npm install qandle-ai\n</code></pre> <p>For AI assistants (Claude Desktop, Cursor IDE, etc.)</p> <p>No installation required! Use Qandle AI directly in your favorite AI applications.</p> <p>Quick Setup</p> <p>\u2192 Follow the MCP Server setup guide</p>"},{"location":"getting-started/quickstart/#initialize-the-client","title":"Initialize the Client","text":"<p>Step 3: Setup</p> <p>Import and configure the Qandle AI client with your API key</p>"},{"location":"getting-started/quickstart/#configuration","title":"Configuration","text":"<p>Environment Variables</p> <p>Set up environment variable for secure configuration:</p> <ul> <li><code>QANDLE_API_KEY</code>: Your Qandle AI API key (required)</li> </ul> PythonNode.jsMCP Server <pre><code>from qandle_ai import QandleClient\n\n# Initialize the client (automatically uses environment variables)\nclient = QandleClient()\n</code></pre> <pre><code>const QandleClient = require('qandle-ai');\n\n// Initialize the client (automatically uses environment variables)\nconst client = new QandleClient();\n</code></pre> <pre><code>{\n  \"mcpServers\": {\n    \"Qandle AI\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://mcp.qandle.ai/mcp\",\n        \"--header\",\n        \"Authorization: Bearer &lt;YOUR_API_KEY&gt;\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Platform-specific setup</p> <p>\u2192 See detailed MCP configuration guide</p>"},{"location":"getting-started/quickstart/#make-your-first-request","title":"Make Your First Request","text":"<p>Step 4: Test Drive</p> <p>Try your first API call to get financial data</p> PythonNode.jsMCP Server <pre><code># Get stock summary\nsummary = client.get(\"AAPL\")\nprint(summary)\n</code></pre> <pre><code>// Get stock summary\nclient.get('AAPL').then(summary =&gt; {\n    console.log(summary);\n});\n</code></pre> <p>Simply ask your AI assistant:</p> <pre><code>Can you get me a financial summary for Apple (AAPL)?\n</code></pre> <p>The AI will automatically use Qandle AI's MCP server to retrieve the data!</p>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<p>Congratulations! \ud83c\udf89</p> <p>You've successfully set up Qandle AI. Here's what you can explore next:</p> <ul> <li>Integrate Qandle AI with LangChain and Langgraph - Build intelligent financial agents with pre-computed data</li> <li>Deploy in Claude, Cursor, etc - Zero-code integration with AI assistants and tools</li> <li>API Reference - Explore available endpoints</li> </ul>"},{"location":"integration/mcp-server/","title":"Using Qandle AI's MCP Server","text":"<p>Model Context Protocol (MCP) is a standardized way for AI applications like Claude, Cursor and ChatGPT to interact with web apps like Qandle AI.</p> <p>By connecting to Qandle AI's MCP server, you can automatically integrate factual and contextual financial data with your AI application or AI agents and benefit from ready-made prompts to automate daily routine tasks to manage your investments.</p>"},{"location":"integration/mcp-server/#quick-setup","title":"Quick Setup","text":"<p>No-code integration coming soon!</p> <p>We are actively working on making Qandle AI's MCP server even easier to integrate with your favorite AI applications. With the integration in place, it will be possible to integrate with Qandle AI's MCP server following the AI application authentication flow directly. Join our Discord to be the first to know when our OAuth 2.1 authentication mechanism following MCP's latest standard will be available!</p>"},{"location":"integration/mcp-server/#claude-desktop","title":"Claude Desktop","text":"<ol> <li>Create <code>~/Library/Application\\ Support/Claude/claude_desktop_config.json</code></li> <li>Add this configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"Qandle AI\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://mcp.qandle.ai/mcp\",\n        \"--header\",\n        \"Authorization: Bearer &lt;API KEY&gt;\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"integration/mcp-server/#cursor-ide","title":"Cursor IDE","text":"<p>For tools that you want to use across all projects, create a <code>~/.cursor/mcp.json</code> file in your home directory. This makes MCP servers available in all your Cursor workspaces.</p>"},{"location":"integration/mcp-server/#global-setup-all-projects","title":"Global Setup (All Projects)","text":"<ol> <li>Create <code>~/.cursor/mcp.json</code> in your home directory</li> <li>Use the same JSON configuration as above</li> </ol>"},{"location":"integration/mcp-server/#project-specific-setup","title":"Project-Specific Setup","text":"<ol> <li>Create <code>.cursor/mcp.json</code> in your project root</li> <li>Use the same JSON configuration as above</li> <li>The server will only be available in that project</li> </ol>"},{"location":"integration/mcp-server/#other-ai-applications","title":"Other AI Applications","text":"<p>Most AI applications that support MCP will have a similar setup process. Look for MCP or \"Tools\" settings and configure the integration with Qandle AI's MCP server following a process similar to Claude and Cursor IDE.</p>"},{"location":"integration/mcp-server/#available-capabilities","title":"Available Capabilities","text":"<p>The Qandle AI MCP server provides the following tools and prompts to AI applications:</p>"},{"location":"integration/mcp-server/#tools","title":"Tools","text":"<ul> <li>get-asset-summary: Retrieve a factual and contextual summary of the latest action for a comma-separated list of symbols, based on the /GET Symbol API endpoint.</li> </ul>"},{"location":"integration/mcp-server/#prompts","title":"Prompts","text":"<ul> <li>Do-I-own-winners: A portfolio benchmark comparison prompt that retrieves comprehensive data for both the stocks and their matching industry ETF benchmarks, displays the information side-by-side in a detailed table for comparison whilst providing factual data presentation without analysis, allowing users to evaluate their portfolio holdings against industry benchmarks.</li> </ul> <p>For detailed examples and usage of prompts, see our Prompts Tutorial.</p>"},{"location":"integration/nodejs/","title":"Node.js SDK","text":"<p>A Node.js client for interacting with the Qandle AI API. The SDK provides a simple and intuitive interface to access financial market data and analysis with full TypeScript support.</p>"},{"location":"integration/nodejs/#installation","title":"Installation","text":"<p>Install the package from npm:</p> <pre><code>npm install qandle-ai\n</code></pre>"},{"location":"integration/nodejs/#requirements","title":"Requirements","text":"<ul> <li>Node.js (compatible with modern Node.js versions)</li> </ul>"},{"location":"integration/nodejs/#configuration","title":"Configuration","text":"<p>The client can be configured using environment variables for easy setup:</p> Environment Variable Description Required <code>QANDLE_API_KEY</code> Your Qandle AI API key \u2705 Required <code>QANDLE_API_URL</code> The base URL for the Qandle AI API \u274c Optional (defaults to <code>https://api.qandle.ai</code>)"},{"location":"integration/nodejs/#setting-environment-variables","title":"Setting Environment Variables","text":"Linux/macOSWindowsNode.js (.env file) <pre><code>export QANDLE_API_KEY=\"your-api-key-here\"\nexport QANDLE_API_URL=\"https://api.qandle.ai\"  # Optional\n</code></pre> <pre><code>set QANDLE_API_KEY=your-api-key-here\nset QANDLE_API_URL=https://api.qandle.ai\n</code></pre> <pre><code>// Using dotenv package\nrequire('dotenv').config();\n\n// Or with ES modules\nimport 'dotenv/config';\n</code></pre>"},{"location":"integration/nodejs/#usage","title":"Usage","text":""},{"location":"integration/nodejs/#basic-usage","title":"Basic Usage","text":"<pre><code>import { QandleClient } from 'qandle-ai';\n\n// Initialize the client (uses QANDLE_API_KEY environment variable)\nconst client = new QandleClient();\n\n// Get stock summary\nclient.get('AAPL').then(summary =&gt; {\n  console.log(summary);\n});\n</code></pre>"},{"location":"integration/nodejs/#custom-configuration","title":"Custom Configuration","text":"<pre><code>import { QandleClient } from 'qandle-ai';\n\n// Initialize with custom API key and base URL\nconst client = new QandleClient({\n  apiKey: 'your-api-key-here',\n  baseUrl: 'https://custom-api.qandle.ai'\n});\n\n// Get stock summary\nclient.get('TSLA').then(summary =&gt; {\n  console.log(summary);\n});\n</code></pre>"},{"location":"integration/nodejs/#using-with-asyncawait","title":"Using with async/await","text":"<pre><code>import { QandleClient } from 'qandle-ai';\n\nasync function getStockSummary() {\n  const client = new QandleClient();\n  try {\n    const summary = await client.get('AAPL');\n    console.log(summary);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ngetStockSummary();\n</code></pre>"},{"location":"integration/nodejs/#api-reference","title":"API Reference","text":""},{"location":"integration/nodejs/#qandleclient","title":"QandleClient","text":"<p>The main class for interacting with the Qandle AI API.</p>"},{"location":"integration/nodejs/#constructor","title":"Constructor","text":"<pre><code>constructor(options?: QandleClientOptions)\n</code></pre> <p>Parameters:</p> <ul> <li><code>options</code> (Object, optional): Configuration options</li> <li><code>apiKey</code> (string, optional): The API key for Qandle AI. If not provided, will attempt to get from <code>QANDLE_API_KEY</code> environment variable.</li> <li><code>baseUrl</code> (string, optional): The base URL for the Qandle AI API. If not provided, will use the default <code>https://api.qandle.ai</code> or <code>QANDLE_API_URL</code> environment variable.</li> </ul> <p>Throws:</p> <ul> <li><code>Error</code>: If no API key is provided and <code>QANDLE_API_KEY</code> environment variable is not set.</li> </ul>"},{"location":"integration/nodejs/#methods","title":"Methods","text":""},{"location":"integration/nodejs/#getsymbol","title":"<code>get(symbol)</code>","text":"<p>Retrieve the current action summary for a stock using the Qandle AI API.</p> <p>Parameters:</p> <ul> <li><code>symbol</code> (string): The stock symbol for which to obtain the current action summary (e.g., \"AAPL\", \"GOOGL\", \"TSLA\").</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;string&gt;</code>: The stock summary message containing analysis and recommendations.</li> </ul> <p>Example:</p> <pre><code>const client = new QandleClient();\nconst result = await client.get(\"AAPL\");\nconsole.log(result);\n</code></pre>"},{"location":"integration/python/","title":"Python SDK","text":"<p>A Python client for interacting with the Qandle AI API. The SDK provides a simple and intuitive interface to access financial market data and analysis.</p>"},{"location":"integration/python/#installation","title":"Installation","text":"<p>Install the package from PyPI using pip:</p> <pre><code>pip install qandle-ai\n</code></pre>"},{"location":"integration/python/#requirements","title":"Requirements","text":"<ul> <li>Python \u22653.7</li> </ul>"},{"location":"integration/python/#configuration","title":"Configuration","text":"<p>The client can be configured using environment variables for easy setup:</p> Environment Variable Description Required <code>QANDLE_API_KEY</code> Your Qandle AI API key \u2705 Required <code>QANDLE_API_URL</code> The base URL for the Qandle AI API \u274c Optional (defaults to <code>https://api.qandle.ai</code>)"},{"location":"integration/python/#setting-environment-variables","title":"Setting Environment Variables","text":"Linux/macOSWindowsPython (.env file) <pre><code>export QANDLE_API_KEY=\"your-api-key-here\"\nexport QANDLE_API_URL=\"https://api.qandle.ai\"  # Optional\n</code></pre> <pre><code>set QANDLE_API_KEY=your-api-key-here\nset QANDLE_API_URL=https://api.qandle.ai\n</code></pre> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()  # Load environment variables from .env file\n</code></pre>"},{"location":"integration/python/#usage","title":"Usage","text":""},{"location":"integration/python/#basic-usage","title":"Basic Usage","text":"<pre><code>from qandle_ai import QandleClient\n\n# Initialize the client (uses QANDLE_API_KEY environment variable)\nclient = QandleClient()\n\n# Get stock summary\nsummary = client.get(\"AAPL\")\nprint(summary)\n</code></pre>"},{"location":"integration/python/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from qandle_ai import QandleClient\n\n# Initialize with custom API key and base URL\nclient = QandleClient(\n    api_key=\"your-api-key-here\",\n    base_url=\"https://custom-api.qandle.ai\"\n)\n\n# Get stock summary\nsummary = client.get(\"TSLA\")\nprint(summary)\n</code></pre>"},{"location":"integration/python/#api-reference","title":"API Reference","text":""},{"location":"integration/python/#qandleclient","title":"QandleClient","text":"<p>The main class for interacting with the Qandle AI API.</p>"},{"location":"integration/python/#constructor","title":"Constructor","text":"<pre><code>QandleClient(api_key=None, base_url=None)\n</code></pre> <p>Parameters:</p> <ul> <li><code>api_key</code> (str, optional): The API key for Qandle AI. If not provided, will attempt to get from <code>QANDLE_API_KEY</code> environment variable.</li> <li><code>base_url</code> (str, optional): The base URL for the Qandle AI API. If not provided, will use the default <code>https://api.qandle.ai</code> or <code>QANDLE_API_URL</code> environment variable.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>: If no API key is provided and <code>QANDLE_API_KEY</code> environment variable is not set.</li> </ul>"},{"location":"integration/python/#methods","title":"Methods","text":""},{"location":"integration/python/#getsymbol","title":"<code>get(symbol)</code>","text":"<p>Retrieve the current action summary for a stock using the Qandle AI API.</p> <p>Parameters:</p> <ul> <li><code>symbol</code> (str): The stock symbol for which to obtain the current action summary (e.g., \"AAPL\", \"GOOGL\", \"TSLA\").</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The stock summary message containing analysis and recommendations.</li> </ul> <p>Example:</p> <pre><code>client = QandleClient()\nresult = client.get(\"AAPL\")\nprint(result)\n</code></pre>"},{"location":"tutorials/langchain/","title":"Integrate Qandle AI with langchain and langraph","text":"<p>Agentic Support</p> <p>LangChain is a framework for building applications with large language models, providing tools for chaining prompts, managing conversations, and integrating external data sources. LangGraph extends this by offering stateful, multi-actor applications with graph-based workflows for complex AI agents.</p> <p>Qandle AI integrates seamlessly with LangChain and LangGraph to build intelligent financial agents. Leverage pre-computed financial intelligence instead of having LLMs calculate metrics in real-time.</p>"},{"location":"tutorials/langchain/#complete-example","title":"Complete Example","text":"<p> Technical Analyst Agent with LangChain \u2192</p>"},{"location":"tutorials/prompts/","title":"Example Prompts","text":"<p>This page contains example prompts that demonstrate how to effectively use Qandle AI in various scenarios. These prompts are designed to leverage financial data intelligence for informed decision-making.</p>"},{"location":"tutorials/prompts/#do-i-own-winners","title":"Do I Own Winners?","text":"<p>Description: Displays your portfolio stocks side-by-side with their industry ETF benchmarks in a detailed table. Shows raw metrics without analysis so you can see if you own the winners.</p> <p>Use Case: Compare your individual stock holdings with their respective industry benchmarks to evaluate portfolio performance at a glance.</p> <p>Parameters: <code>symbols</code> (string, required): Stock symbols to analyze (comma-separated, e.g., 'AAPL,GOOGL,TSLA')</p> <p>Prompt:</p> <pre><code>PERSONA: Portfolio data analyst specializing in comprehensive stock and \nsector information display\n\nTASK: Take comma-separated stock symbols input ${symbols} from user portfolio, \nretrieve matching industry ETF benchmarks, get comprehensive summaries for\nall assets, present factual data side-by-side without analysis or interpretation\n\nCONTEXT: User needs comprehensive factual overview of portfolio holdings \nalongside their respective industry benchmarks for personal evaluation\n\nFORMAT: Output rich detailed information table displaying stock metrics adjacent \nto corresponding industry ETF metrics with clear data presentation and no \ncomparative analysis or rankings\n</code></pre> <p>Example Usage: <pre><code>Symbols: AAPL,MSFT,NVDA\n</code></pre></p> <p>This prompt will generate a comprehensive table comparing your holdings (AAPL, MSFT, NVDA) with their respective industry ETF benchmarks, allowing you to assess whether you're holding market winners or laggards.</p> <p>Best Practices</p> <ul> <li>Use uppercase ticker symbols for consistency</li> <li>Separate multiple symbols with commas</li> <li>The prompt focuses on data presentation without bias, letting you draw your own conclusions</li> <li>Industry ETF benchmarks are automatically matched to each stock for relevant comparison</li> </ul>"}]}